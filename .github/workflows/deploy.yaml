on:
  workflow_dispatch:
    inputs:
      repoName:
        description: 'Repository Name'
        required: true
      repoOwner:
        description: 'Repository Owner'
        required: true
      awsRegion:
        description: 'AWS Region'
        required: true
      s3Bucket:
        description: 'S3 Bucket Name'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repoOwner }}/${{ github.event.inputs.repoName }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      - name: Create S3 Bucket (if not exists)
        run: |
          if ! aws s3api head-bucket --bucket ${{ github.event.inputs.s3Bucket }} 2>/dev/null; then
            aws s3api create-bucket --bucket ${{ github.event.inputs.s3Bucket }} --region ${{ github.event.inputs.awsRegion }} --create-bucket-configuration LocationConstraint=${{ github.event.inputs.awsRegion }}
            echo "Bucket created: ${{ github.event.inputs.s3Bucket }}"
          else
            echo "Bucket already exists: ${{ github.event.inputs.s3Bucket }}"

      - name: Enable Public Access & Static Website Hosting
        run: |
          aws s3api put-bucket-policy --bucket ${{ github.event.inputs.s3Bucket }} --policy '{
            "Version": "2012-10-17",
            "Statement": [{
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::${{ github.event.inputs.s3Bucket }}/*"
            }]
          }'

          aws s3 website s3://${{ github.event.inputs.s3Bucket }} --index-document index.html

      - name: Deploy App to S3
        run: |
          aws s3 sync . s3://${{ github.event.inputs.s3Bucket }} --delete

      - name: Output Website URL
        run: |
          echo "App deployed to: http://${{ github.event.inputs.s3Bucket }}.s3-website-${{ github.event.inputs.awsRegion }}.amazonaws.com"
