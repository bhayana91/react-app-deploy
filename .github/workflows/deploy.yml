name: Deploy Vite React application on S3
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: 'Repository Name'
        required: true
      repoOwner:
        description: 'Repository Owner'
        required: true
      awsRegion:
        description: 'AWS Region'
        required: true
      s3Bucket:
        description: 'S3 Bucket Name'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repoOwner }}/${{ github.event.inputs.repoName }}
          token: ${{ secrets.MY_GITHUB_PAT }}
          ref: main

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      # ðŸ”’ Security Scans
      - name: Run ESLint Security Check
        run: npx eslint . --ext .js,.ts,.tsx --max-warnings 0 || true

      - name: Run npm Audit
        run: npm audit --production || true
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --report
      - name: Monitor and Push to Snyk Dashboard
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: monitor --all-projects
      - name: Build React App
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      - name: Convert S3 Bucket Name to Lowercase
        run: |
          echo "S3_BUCKET_LOWER=$(echo '${{ github.event.inputs.s3Bucket }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create S3 Bucket (if not exists)
        run: |
          if ! aws s3api head-bucket --bucket "$S3_BUCKET_LOWER" 2>/dev/null; then
            aws s3api create-bucket --bucket "$S3_BUCKET_LOWER" --region ${{ github.event.inputs.awsRegion }} --create-bucket-configuration LocationConstraint=${{ github.event.inputs.awsRegion }}
            echo "Bucket created: $S3_BUCKET_LOWER"
          else
            echo "Bucket already exists: $S3_BUCKET_LOWER"
          fi

      - name: Allow Public Access to S3 Bucket
        run: |
          aws s3api put-public-access-block --bucket "$S3_BUCKET_LOWER" --public-access-block-configuration '{
            "BlockPublicAcls": false,
            "IgnorePublicAcls": false,
            "BlockPublicPolicy": false,
            "RestrictPublicBuckets": false
          }'

      - name: Enable Public Access & Static Website Hosting
        run: |
          POLICY=$(cat <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::${S3_BUCKET_LOWER}/*"
            }]
          }
          EOF
          )
          
          aws s3api put-bucket-policy --bucket "$S3_BUCKET_LOWER" --policy "$POLICY"
          aws s3 website s3://"$S3_BUCKET_LOWER" --index-document index.html

      - name: Deploy App to S3
        run: aws s3 sync ./dist s3://"$S3_BUCKET_LOWER" --delete

      - name: Output Website URL
        run: 'echo "App deployed to: https://$S3_BUCKET_LOWER.s3.${{ github.event.inputs.awsRegion }}.amazonaws.com/index.html"'
